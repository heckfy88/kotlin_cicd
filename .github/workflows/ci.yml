name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Цель: Сборка проекта на всех ОС (Ubuntu, Windows, macOS) для проверки совместимости.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Клонирование репозитория.

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
        # Установка JDK 17 с использованием Temurin.

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
        # Кэширование зависимостей Maven для ускорения сборки.

      - name: Build with Maven
        run: mvn clean install -DskipTests
        # Сборка проекта с помощью Maven без выполнения тестов.

      - name: List target directory
        run: ls -l target
        # Вывод содержимого директории target для проверки результатов сборки.

  test:
    # Цель: Запуск модульных тестов для проверки корректности работы кода.
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Клонирование репозитория.

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
        # Установка JDK 17 с использованием Temurin.

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
        # Кэширование зависимостей Maven.

      - name: Run unit tests
        run: mvn test
        # Запуск модульных тестов с помощью Maven.

  deploy:
    # Цель: Развёртывание приложения на удалённый сервер после успешного прохождения тестов.
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd kotlin_cicd
            # Переход в директорию проекта.
            mvn clean install
            # Повторная сборка проекта с помощью Maven.
            docker compose down
            # Остановка текущих Docker-контейнеров.
            docker compose up -d --build
            # Сборка и запуск обновлённых контейнеров с помощью docker compose.
   
